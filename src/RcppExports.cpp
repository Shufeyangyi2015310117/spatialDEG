// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SysMatEigen3
arma::mat SysMatEigen3(arma::mat M);
RcppExport SEXP _spatialDEG_SysMatEigen3(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(SysMatEigen3(M));
    return rcpp_result_gen;
END_RCPP
}
// SysMatEigen2
List SysMatEigen2(arma::mat M);
RcppExport SEXP _spatialDEG_SysMatEigen2(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(SysMatEigen2(M));
    return rcpp_result_gen;
END_RCPP
}
// spatialDEG_true_kernel_test
List spatialDEG_true_kernel_test(arma::mat& W, arma::mat& Y, arma::mat& K1, arma::mat& K2, arma::vec& Initial_theta, bool mu_fixed, bool verbose, bool check_positive);
RcppExport SEXP _spatialDEG_spatialDEG_true_kernel_test(SEXP WSEXP, SEXP YSEXP, SEXP K1SEXP, SEXP K2SEXP, SEXP Initial_thetaSEXP, SEXP mu_fixedSEXP, SEXP verboseSEXP, SEXP check_positiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type K2(K2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Initial_theta(Initial_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type mu_fixed(mu_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type check_positive(check_positiveSEXP);
    rcpp_result_gen = Rcpp::wrap(spatialDEG_true_kernel_test(W, Y, K1, K2, Initial_theta, mu_fixed, verbose, check_positive));
    return rcpp_result_gen;
END_RCPP
}
// spatialDEG_paral_test
List spatialDEG_paral_test(arma::mat& spa1, arma::mat& spa2, arma::mat& W, arma::mat& Y, arma::vec& Initial_theta, int num_ls, int iteration, bool Kernel_fixd, bool verbose, bool kernel_matched, const int coreNum, double tol);
RcppExport SEXP _spatialDEG_spatialDEG_paral_test(SEXP spa1SEXP, SEXP spa2SEXP, SEXP WSEXP, SEXP YSEXP, SEXP Initial_thetaSEXP, SEXP num_lsSEXP, SEXP iterationSEXP, SEXP Kernel_fixdSEXP, SEXP verboseSEXP, SEXP kernel_matchedSEXP, SEXP coreNumSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type spa1(spa1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type spa2(spa2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Initial_theta(Initial_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type num_ls(num_lsSEXP);
    Rcpp::traits::input_parameter< int >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< bool >::type Kernel_fixd(Kernel_fixdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type kernel_matched(kernel_matchedSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(spatialDEG_paral_test(spa1, spa2, W, Y, Initial_theta, num_ls, iteration, Kernel_fixd, verbose, kernel_matched, coreNum, tol));
    return rcpp_result_gen;
END_RCPP
}
// spatialDEG_test
List spatialDEG_test(arma::mat& spa1, arma::mat& spa2, arma::mat& W, arma::mat& Y, arma::vec& Initial_theta, bool mu_fixed, bool verbose);
RcppExport SEXP _spatialDEG_spatialDEG_test(SEXP spa1SEXP, SEXP spa2SEXP, SEXP WSEXP, SEXP YSEXP, SEXP Initial_thetaSEXP, SEXP mu_fixedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type spa1(spa1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type spa2(spa2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Initial_theta(Initial_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type mu_fixed(mu_fixedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(spatialDEG_test(spa1, spa2, W, Y, Initial_theta, mu_fixed, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spatialDEG_SysMatEigen3", (DL_FUNC) &_spatialDEG_SysMatEigen3, 1},
    {"_spatialDEG_SysMatEigen2", (DL_FUNC) &_spatialDEG_SysMatEigen2, 1},
    {"_spatialDEG_spatialDEG_true_kernel_test", (DL_FUNC) &_spatialDEG_spatialDEG_true_kernel_test, 8},
    {"_spatialDEG_spatialDEG_paral_test", (DL_FUNC) &_spatialDEG_spatialDEG_paral_test, 12},
    {"_spatialDEG_spatialDEG_test", (DL_FUNC) &_spatialDEG_spatialDEG_test, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_spatialDEG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
